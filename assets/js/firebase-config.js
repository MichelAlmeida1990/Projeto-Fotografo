// ===== CONFIGURA√á√ÉO DO FIREBASE =====
// IMPORTANTE: Substitua as credenciais abaixo pelas suas credenciais reais do Firebase
// Para obter suas credenciais:
// 1. Acesse console.firebase.google.com
// 2. Selecione seu projeto
// 3. Clique na engrenagem (‚öôÔ∏è) ‚Üí Configura√ß√µes do projeto
// 4. Role at√© "Seus aplicativos" e clique em "Adicionar app" ‚Üí Web
// 5. Copie a configura√ß√£o e substitua abaixo

const firebaseConfig = {
    apiKey: "AIzaSyB_iUzatG_vYbZRr7qMHqO3y0leBoTghcU",
    authDomain: "cristiane-justino-fotografia.firebaseapp.com",
    projectId: "cristiane-justino-fotografia",
    storageBucket: "cristiane-justino-fotografia.firebasestorage.app",
    messagingSenderId: "475947671200",
    appId: "1:475947671200:web:9d391f4f3e051ced4bf3c5",
    measurementId: "G-WC96G4XVHC"
};

// ===== INICIALIZA√á√ÉO DO FIREBASE =====
try {
    firebase.initializeApp(firebaseConfig);
    console.log('‚úÖ Firebase inicializado com sucesso');
    
    // Configurar listener de estado de autentica√ß√£o
firebase.auth().onAuthStateChanged(async (user) => {
    if (user) {
        console.log('üîê Usu√°rio autenticado:', user.email);
        
        // Verificar se √© admin e atualizar interface
        setTimeout(async () => {
            const isAdmin = await isAdminAuthenticated();
            console.log('Status de admin ap√≥s autentica√ß√£o:', isAdmin);
            
            // Atualizar interface se estiver dispon√≠vel
            if (typeof updateAuthStatus === 'function') {
                await updateAuthStatus();
            }
        }, 1000);
    } else {
        console.log('üîì Usu√°rio desautenticado');
        
        // Atualizar interface se estiver dispon√≠vel
        if (typeof updateAuthStatus === 'function') {
            setTimeout(async () => {
                await updateAuthStatus();
            }, 500);
        }
    }
});
    
} catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
}

const db = firebase.firestore();
const appointmentsCollection = db.collection('appointments');
const availabilityCollection = db.collection('availability');

console.log('‚úÖ Collections configuradas:', { appointmentsCollection, availabilityCollection });

// Inicializar Analytics (opcional)
if (typeof firebase.analytics !== 'undefined') {
    firebase.analytics();
}

// ===== FUN√á√ïES DO FIREBASE =====

// Fun√ß√£o para enviar notifica√ß√£o por e-mail
async function sendEmailNotification(appointmentData) {
    try {
        console.log('=== ENVIANDO E-MAIL DE NOTIFICA√á√ÉO ===');
        console.log('EmailJS dispon√≠vel:', typeof emailjs !== 'undefined');
        console.log('EmailJS objeto:', emailjs);
        
        // Verificar se o EmailJS est√° dispon√≠vel
        if (typeof emailjs === 'undefined') {
            console.log('‚ùå EmailJS n√£o est√° dispon√≠vel');
            return;
        }
        
        console.log('‚úÖ EmailJS est√° dispon√≠vel');
        
        // Verificar se o m√©todo send existe
        if (typeof emailjs.send !== 'function') {
            console.log('‚ùå emailjs.send n√£o √© uma fun√ß√£o');
            console.log('M√©todos dispon√≠veis:', Object.keys(emailjs));
            return;
        }
        
        console.log('‚úÖ emailjs.send est√° dispon√≠vel');
        
        const templateParams = {
            clientName: appointmentData.clientName || 'Cliente',
            clientEmail: appointmentData.clientEmail || 'cliente@email.com',
            clientPhone: appointmentData.clientPhone || '(11) 99999-9999',
            serviceType: appointmentData.serviceType || 'Sess√£o Fotogr√°fica',
            date: appointmentData.date || 'Data n√£o informada',
            time: appointmentData.time ? getTimeText(appointmentData.time) : 'Hor√°rio n√£o informado',
            message: appointmentData.message || 'Sem mensagem adicional',
            createdAt: new Date().toLocaleString('pt-BR')
        };

        console.log('üìß Par√¢metros do template:', templateParams);
        console.log('üîß Service ID:', 'service_g2cr22t');
        console.log('üìù Template ID:', 'template_71hujhc');

        // Tentar enviar o e-mail
        console.log('üöÄ Iniciando envio do e-mail...');
        
        const result = await emailjs.send(
            'service_g2cr22t',
            'template_71hujhc',
            templateParams
        );

        console.log('‚úÖ E-mail enviado com sucesso!');
        console.log('üì® Resultado:', result);
        
        // Verificar se o resultado indica sucesso
        if (result && result.status === 200) {
            console.log('üéâ E-mail confirmado como enviado!');
        } else {
            console.log('‚ö†Ô∏è E-mail enviado mas status n√£o confirmado:', result);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao enviar e-mail:', error);
        console.log('=== DETALHES DO ERRO ===');
        console.log('Tipo do erro:', error.constructor.name);
        console.log('Mensagem:', error.message);
        console.log('Stack:', error.stack);
        console.log('=== DETALHES DO AGENDAMENTO ===');
        console.log('Cliente:', appointmentData.clientName);
        console.log('E-mail:', appointmentData.clientEmail);
        console.log('Telefone:', appointmentData.clientPhone);
        console.log('Servi√ßo:', appointmentData.serviceType);
        console.log('Data:', appointmentData.date);
        console.log('Hor√°rio:', appointmentData.time);
        console.log('Mensagem:', appointmentData.message);
        console.log('================================');
    }
}

// Carregar agendamentos existentes
async function loadAppointments() {
    try {
        const snapshot = await appointmentsCollection.get();
        const appointments = [];
        snapshot.forEach(doc => {
            const data = doc.data();
            const timeText = data.time ? ` (${getTimeText(data.time)})` : '';
            appointments.push({
                id: doc.id,
                title: `Agendado${timeText}`,
                start: data.date,
                backgroundColor: '#FF0000',
                borderColor: '#FF0000',
                textColor: '#FFFFFF',
                extendedProps: {
                    clientName: data.clientName,
                    clientEmail: data.clientEmail,
                    clientPhone: data.clientPhone,
                    serviceType: data.serviceType,
                    time: data.time,
                    message: data.message,
                    status: data.status
                }
            });
        });
        
        // N√£o adicionamos mais eventos visuais para dias n√£o dispon√≠veis
        // O bloqueio √© feito apenas atrav√©s do CSS e valida√ß√£o
        
        return appointments;
    } catch (error) {
        console.error('Erro ao carregar agendamentos:', error);
        throw error;
    }
}

// Fun√ß√£o auxiliar para converter c√≥digo de hor√°rio em texto
function getTimeText(time) {
    switch(time) {
        case 'manha': return 'Manh√£';
        case 'tarde': return 'Tarde';
        case 'noite': return 'Noite';
        default: return time;
    }
}

// Fun√ß√£o removida - n√£o criamos mais eventos visuais para dias n√£o dispon√≠veis
// O bloqueio √© feito apenas atrav√©s do CSS e valida√ß√£o no dateClick

// Verificar disponibilidade de uma data
async function checkAvailability(date) {
    try {
        console.log('=== FIREBASE checkAvailability ===');
        console.log('Data recebida:', date);
        console.log('Tipo da data:', typeof date);
        
        const dateStr = date.toISOString().split('T')[0];
        console.log('Data formatada para consulta:', dateStr);
        
        // Verificar se √© segunda-feira (1) ou sexta-feira (5)
        const dayOfWeek = date.getDay();
        console.log('Dia da semana (0=Domingo, 1=Segunda, ..., 6=S√°bado):', dayOfWeek);
        
        if (dayOfWeek === 1 || dayOfWeek === 5) {
            console.log('Segunda ou Sexta - n√£o atendemos - retornando false');
            return false;
        }
        
        // Verificar se h√° agendamentos para esta data
        console.log('Verificando agendamentos existentes...');
        const appointments = await appointmentsCollection
            .where('date', '==', dateStr)
            .get();
        
        const appointmentCount = appointments.size;
        console.log('N√∫mero de agendamentos para esta data:', appointmentCount);
        
        // Se j√° tem 3 agendamentos, a data est√° lotada
        if (appointmentCount >= 3) {
            console.log('Data lotada (3 agendamentos) - retornando false');
            return false;
        }
        
        // Se n√£o h√° registro de disponibilidade nem agendamentos, a data est√° dispon√≠vel
        console.log('Data dispon√≠vel - retornando true');
        return true;
        
    } catch (error) {
        console.error('Erro ao verificar disponibilidade:', error);
        // Em caso de erro, retornar true (dispon√≠vel) para n√£o bloquear a sele√ß√£o
        console.log('Erro - retornando true (dispon√≠vel)');
        return true;
    }
}

// Criar novo agendamento
async function createAppointment(appointmentData) {
    try {
        console.log('=== CRIANDO AGENDAMENTO ===');
        console.log('Dados:', appointmentData);
        
        // Verificar disponibilidade do hor√°rio espec√≠fico
        let checkDate;
        if (appointmentData.date.includes('-')) {
            const [year, month, day] = appointmentData.date.split('-').map(Number);
            checkDate = new Date(year, month - 1, day);
        } else {
            checkDate = new Date(appointmentData.date);
        }
        
        console.log('Data para verifica√ß√£o:', checkDate);
        
        const timeAvailability = await checkTimeAvailability(checkDate, appointmentData.time);
        console.log('Disponibilidade:', timeAvailability);
        
        if (!timeAvailability.available) {
            return { success: false, error: timeAvailability.reason };
        }

        // Salvar agendamento
        const appointmentDoc = {
            ...appointmentData,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            status: 'pending'
        };
        
        console.log('Documento a ser salvo:', appointmentDoc);
        
        const docRef = await appointmentsCollection.add(appointmentDoc);
        console.log('Agendamento salvo com ID:', docRef.id);
        
        // Tentar enviar notifica√ß√£o por e-mail (n√£o bloquear se falhar)
        try {
            await sendEmailNotification(appointmentData);
        } catch (emailError) {
            console.error('Erro ao enviar e-mail de notifica√ß√£o:', emailError);
            // N√£o bloquear o agendamento se o e-mail falhar
        }

        return { success: true, appointmentId: docRef.id };
    } catch (error) {
        console.error('Erro ao criar agendamento:', error);
        return { success: false, error: error.message };
    }
}

// Verificar disponibilidade de hor√°rio espec√≠fico
async function checkTimeAvailability(date, time) {
    try {
        console.log('=== FIREBASE checkTimeAvailability ===');
        console.log('Data:', date);
        console.log('Hor√°rio:', time);
        
        const dateStr = date.toISOString().split('T')[0];
        
        // Verificar se √© segunda-feira (1) ou sexta-feira (5)
        const dayOfWeek = date.getDay();
        if (dayOfWeek === 1 || dayOfWeek === 5) {
            return { available: false, reason: 'Dia n√£o dispon√≠vel' };
        }
        
        // Verificar se j√° tem 3 agendamentos para esta data
        const allAppointments = await appointmentsCollection
            .where('date', '==', dateStr)
            .get();
        
        if (allAppointments.size >= 3) {
            return { available: false, reason: 'Dia lotado (m√°ximo 3 agendamentos)' };
        }
        
        // Verificar agendamentos para esta data e hor√°rio
        const appointments = await appointmentsCollection
            .where('date', '==', dateStr)
            .where('time', '==', time)
            .get();
        
        if (!appointments.empty) {
            return { available: false, reason: 'Hor√°rio j√° ocupado' };
        }
        
        return { available: true };
    } catch (error) {
        console.error('Erro ao verificar disponibilidade de hor√°rio:', error);
        return { available: true }; // Permitir agendamento mesmo com erro
    }
}

// Marcar data como indispon√≠vel
async function markDateAsUnavailable(date) {
    try {
        const dateStr = date.toISOString().split('T')[0];
        await availabilityCollection.doc(dateStr).set({
            available: false,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    } catch (error) {
        console.error('Erro ao marcar data como indispon√≠vel:', error);
        throw error;
    }
}

// Marcar data como dispon√≠vel
async function markDateAsAvailable(date) {
    try {
        const dateStr = date.toISOString().split('T')[0];
        await availabilityCollection.doc(dateStr).set({
            available: true,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    } catch (error) {
        console.error('Erro ao marcar data como dispon√≠vel:', error);
        throw error;
    }
}

// Cancelar agendamento
async function cancelAppointment(appointmentId, date) {
    try {
        await appointmentsCollection.doc(appointmentId).delete();
        
        // Criar a data corretamente para o timezone local
        let checkDate;
        if (date.includes('-')) {
            const [year, month, day] = date.split('-').map(Number);
            checkDate = new Date(year, month - 1, day);
        } else {
            checkDate = new Date(date);
        }
        
        await markDateAsAvailable(checkDate);
        return { success: true };
    } catch (error) {
        console.error('Erro ao cancelar agendamento:', error);
        throw error;
    }
}

// Configurar listener em tempo real
function setupRealtimeListener(calendar) {
    let isInitialLoad = true;
    let listener = null;
    
    console.log('=== CONFIGURANDO LISTENER EM TEMPO REAL ===');
    console.log('Calendar objeto:', calendar);
    
    // Verificar se j√° existe um listener ativo e remov√™-lo
    if (window.currentAppointmentListener) {
        window.currentAppointmentListener();
        console.log('üîÑ Listener anterior removido');
    }
    
    try {
        listener = appointmentsCollection.onSnapshot(snapshot => {
            console.log('=== SNAPSHOT RECEBIDO ===');
            console.log('√â carregamento inicial:', isInitialLoad);
            console.log('N√∫mero de documentos:', snapshot.size);
            console.log('Documentos vazios:', snapshot.empty);
            
            // Se for o carregamento inicial, adicionar todos os eventos de uma vez
            if (isInitialLoad) {
                const events = [];
                snapshot.forEach(doc => {
                    const data = doc.data();
                    console.log('Documento carregado:', doc.id, data);
                    events.push({
                        id: doc.id,
                        title: 'Agendado',
                        start: data.date,
                        backgroundColor: '#FF0000',
                        borderColor: '#FF0000',
                        textColor: '#FFFFFF',
                        extendedProps: {
                            clientName: data.clientName,
                            clientEmail: data.clientEmail,
                            clientPhone: data.clientPhone,
                            serviceType: data.serviceType,
                            message: data.message,
                            status: data.status
                        }
                    });
                });
                
                console.log('Eventos criados:', events.length);
                if (events.length > 0) {
                    calendar.addEventSource(events);
                    console.log('‚úÖ Eventos adicionados ao calend√°rio');
                } else {
                    console.log('‚ö†Ô∏è Nenhum evento para adicionar');
                }
                
                isInitialLoad = false;
                return;
            }
            
            // Para mudan√ßas subsequentes, processar apenas as mudan√ßas
            snapshot.docChanges().forEach(change => {
                console.log('Mudan√ßa detectada:', change.type, change.doc.id);
                if (change.type === 'added') {
                    const data = change.doc.data();
                    calendar.addEvent({
                        id: change.doc.id,
                        title: 'Agendado',
                        start: data.date,
                        backgroundColor: '#FF0000',
                        borderColor: '#FF0000',
                        textColor: '#FFFFFF',
                        extendedProps: {
                            clientName: data.clientName,
                            clientEmail: data.clientEmail,
                            clientPhone: data.clientPhone,
                            serviceType: data.serviceType,
                            message: data.message,
                            status: data.status
                        }
                    });
                    console.log('‚úÖ Novo evento adicionado:', change.doc.id);
                } else if (change.type === 'removed') {
                    const event = calendar.getEventById(change.doc.id);
                    if (event) {
                        event.remove();
                        console.log('‚úÖ Evento removido:', change.doc.id);
                    } else {
                        console.log('‚ö†Ô∏è Evento n√£o encontrado para remo√ß√£o:', change.doc.id);
                    }
                }
            });
        }, error => {
            console.error('‚ùå Erro no listener em tempo real:', error);
            // Tentar reconectar ap√≥s 5 segundos
            setTimeout(() => {
                console.log('üîÑ Tentando reconectar listener...');
                setupRealtimeListener(calendar);
            }, 5000);
        });
        
        // Salvar refer√™ncia do listener para poder remov√™-lo depois
        window.currentAppointmentListener = listener;
        console.log('‚úÖ Listener configurado com sucesso');
        
    } catch (error) {
        console.error('‚ùå Erro ao configurar listener:', error);
    }
}

// Fun√ß√£o de teste para verificar agendamentos
async function testLoadAppointments() {
    try {
        console.log('=== TESTE DE CARREGAMENTO DE AGENDAMENTOS ===');
        
        const snapshot = await appointmentsCollection.get();
        console.log('Total de agendamentos no Firebase:', snapshot.size);
        
        if (snapshot.empty) {
            console.log('‚ö†Ô∏è Nenhum agendamento encontrado no Firebase');
            return;
        }
        
        snapshot.forEach(doc => {
            const data = doc.data();
            console.log('Agendamento:', {
                id: doc.id,
                clientName: data.clientName,
                date: data.date,
                time: data.time,
                serviceType: data.serviceType
            });
        });
        
        console.log('‚úÖ Teste de carregamento conclu√≠do');
        
    } catch (error) {
        console.error('‚ùå Erro no teste de carregamento:', error);
    }
}

// Fun√ß√£o de teste para login de administrador
async function testAdminLogin() {
    try {
        console.log('=== TESTE DE LOGIN DE ADMINISTRADOR ===');
        
        const email = 'krika.justino@gmail.com';
        const password = 'Cris2025@1';
        
        console.log('Testando login com:', email);
        
        const result = await adminLogin(email, password);
        
        if (result.success) {
            console.log('‚úÖ Login de administrador bem-sucedido!');
            console.log('Usu√°rio:', result.user.email);
            
            // Verificar se pode excluir agendamentos
            const isAdmin = await isAdminAuthenticated();
            console.log('Pode excluir agendamentos:', isAdmin);
            
            return true;
        } else {
            console.log('‚ùå Falha no login:', result.error);
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de login:', error);
        return false;
    }
}

// Fun√ß√£o de teste para EmailJS
async function testEmailJS() {
    try {
        console.log('=== TESTE EMAILJS ===');
        console.log('EmailJS dispon√≠vel:', typeof emailjs !== 'undefined');
        console.log('EmailJS objeto:', emailjs);
        
        if (typeof emailjs === 'undefined') {
            console.log('‚ùå EmailJS n√£o est√° dispon√≠vel');
            return false;
        }
        
        console.log('‚úÖ EmailJS est√° dispon√≠vel');
        
        // Verificar se o m√©todo send existe
        if (typeof emailjs.send !== 'function') {
            console.log('‚ùå emailjs.send n√£o √© uma fun√ß√£o');
            console.log('M√©todos dispon√≠veis:', Object.keys(emailjs));
            return false;
        }
        
        console.log('‚úÖ emailjs.send est√° dispon√≠vel');
        
        // Teste simples
        const testParams = {
            clientName: 'Teste Autom√°tico',
            clientEmail: 'teste@teste.com',
            clientPhone: '(11) 99999-9999',
            serviceType: 'Sess√£o de Teste',
            date: '2025-01-01',
            time: 'Manh√£ (8h √†s 12h)',
            message: 'Este √© um teste autom√°tico do sistema',
            createdAt: new Date().toLocaleString('pt-BR')
        };
        
        console.log('üìß Par√¢metros de teste:', testParams);
        console.log('üîß Service ID:', 'service_g2cr22t');
        console.log('üìù Template ID:', 'template_71hujhc');
        
        console.log('üöÄ Iniciando teste de envio...');
        
        const result = await emailjs.send(
            'service_g2cr22t',
            'template_71hujhc',
            testParams
        );
        
        console.log('‚úÖ Teste de e-mail bem-sucedido!');
        console.log('üì® Resultado:', result);
        
        // Verificar se o resultado indica sucesso
        if (result && result.status === 200) {
            console.log('üéâ Teste confirmado como enviado!');
            return true;
        } else {
            console.log('‚ö†Ô∏è Teste enviado mas status n√£o confirmado:', result);
            return true; // Ainda consideramos sucesso se n√£o houver erro
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste de e-mail:', error);
        console.log('=== DETALHES DO ERRO ===');
        console.log('Tipo do erro:', error.constructor.name);
        console.log('Mensagem:', error.message);
        console.log('Stack:', error.stack);
        return false;
    }
}

// ===== EXPORTAR FUN√á√ïES =====
window.FirebaseAppointment = {
    loadAppointments,
    checkAvailability,
    checkTimeAvailability,
    createAppointment,
    markDateAsUnavailable,
    markDateAsAvailable,
    cancelAppointment,
    setupRealtimeListener,
    sendEmailNotification,
    testEmailJS,
    testLoadAppointments,
    testAdminLogin
};

console.log('‚úÖ FirebaseAppointment exportado:', window.FirebaseAppointment);
console.log('‚úÖ checkTimeAvailability dispon√≠vel:', typeof window.FirebaseAppointment.checkTimeAvailability); 

// ===== SISTEMA DE AUTENTICA√á√ÉO PARA ADMINISTRADORES =====

// Verificar se o usu√°rio est√° autenticado como administrador
async function isAdminAuthenticated() {
    try {
        console.log('=== VERIFICANDO AUTENTICA√á√ÉO DE ADMIN ===');
        
        // Verificar se o Firebase est√° dispon√≠vel
        if (typeof firebase === 'undefined') {
            console.log('‚ùå Firebase n√£o est√° carregado');
            return false;
        }
        
        // Verificar se o auth est√° dispon√≠vel
        if (!firebase.auth) {
            console.log('‚ùå Firebase Auth n√£o est√° dispon√≠vel');
            return false;
        }
        
        const user = firebase.auth().currentUser;
        console.log('Usu√°rio atual:', user ? user.email : 'Nenhum usu√°rio autenticado');
        
        if (!user) {
            console.log('‚ùå Nenhum usu√°rio autenticado');
            return false;
        }
        
        // Verificar se o e-mail est√° na lista de administradores
        const adminEmails = [
            'krika.justino@gmail.com',
            'cristiane@cristianejustino.com',
            'admin@cristianejustino.com'
            // Adicione mais e-mails de administradores aqui
        ];
        
        // Normalizar e-mails para compara√ß√£o (remover espa√ßos e converter para min√∫sculas)
        const normalizedUserEmail = user.email.toLowerCase().trim();
        const normalizedAdminEmails = adminEmails.map(email => email.toLowerCase().trim());
        
        const isAdmin = normalizedAdminEmails.includes(normalizedUserEmail);
        console.log('E-mail do usu√°rio (normalizado):', normalizedUserEmail);
        console.log('√â administrador:', isAdmin);
        console.log('Lista de admins (normalizada):', normalizedAdminEmails);
        console.log('Compara√ß√£o exata:', normalizedAdminEmails.includes(normalizedUserEmail));
        
        // Debug adicional
        console.log('Tipo do e-mail do usu√°rio:', typeof user.email);
        console.log('Comprimento do e-mail do usu√°rio:', user.email.length);
        console.log('E-mail do usu√°rio cont√©m espa√ßos:', user.email.includes(' '));
        
        return isAdmin;
    } catch (error) {
        console.error('‚ùå Erro ao verificar autentica√ß√£o de admin:', error);
        return false;
    }
}

// Fazer login como administrador
async function adminLogin(email, password) {
    try {
        console.log('=== TENTANDO LOGIN DE ADMINISTRADOR ===');
        console.log('E-mail:', email);
        console.log('Senha fornecida:', password ? '***' : 'n√£o fornecida');
        
        // Verificar se o Firebase est√° dispon√≠vel
        if (typeof firebase === 'undefined') {
            throw new Error('Firebase n√£o est√° carregado. Recarregue a p√°gina.');
        }
        
        // Verificar se o auth est√° dispon√≠vel
        if (!firebase.auth) {
            throw new Error('Firebase Auth n√£o est√° dispon√≠vel. Recarregue a p√°gina.');
        }
        
        const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        console.log('‚úÖ Login do Firebase realizado com sucesso');
        console.log('Usu√°rio autenticado:', user.email);
        
        // Aguardar um pouco para garantir que a autentica√ß√£o foi processada
        console.log('Aguardando processamento da autentica√ß√£o...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Verificar se √© um administrador
        console.log('Verificando se √© administrador...');
        const isAdmin = await isAdminAuthenticated();
        console.log('Resultado da verifica√ß√£o de admin:', isAdmin);
        
        if (!isAdmin) {
            console.log('‚ùå Usu√°rio n√£o √© administrador');
            console.log('E-mail do usu√°rio que tentou fazer login:', user.email);
            
            // Debug adicional
            const adminEmails = [
                'krika.justino@gmail.com',
                'cristiane@cristianejustino.com',
                'admin@cristianejustino.com'
            ];
            console.log('Lista de e-mails de admin:', adminEmails);
            console.log('E-mail do usu√°rio est√° na lista?', adminEmails.includes(user.email));
            
            // Fazer logout do usu√°rio n√£o autorizado
            await firebase.auth().signOut();
            console.log('Usu√°rio n√£o autorizado foi desconectado');
            
            throw new Error('Acesso negado. Apenas administradores podem fazer login.');
        }
        
        console.log('‚úÖ Login de administrador realizado com sucesso:', user.email);
        return { success: true, user: user };
    } catch (error) {
        console.error('‚ùå Erro no login de administrador:', error);
        console.log('Tipo do erro:', error.code);
        console.log('Mensagem do erro:', error.message);
        
        // Traduzir erros comuns
        let errorMessage = error.message;
        if (error.code === 'auth/user-not-found') {
            errorMessage = 'E-mail n√£o encontrado. Verifique se o e-mail est√° correto.';
        } else if (error.code === 'auth/wrong-password') {
            errorMessage = 'Senha incorreta. Verifique a senha.';
        } else if (error.code === 'auth/invalid-email') {
            errorMessage = 'E-mail inv√°lido. Verifique o formato do e-mail.';
        } else if (error.code === 'auth/too-many-requests') {
            errorMessage = 'Muitas tentativas de login. Tente novamente em alguns minutos.';
        } else if (error.code === 'auth/network-request-failed') {
            errorMessage = 'Erro de conex√£o. Verifique sua internet e tente novamente.';
        }
        
        return { success: false, error: errorMessage };
    }
}

// Fazer logout
async function adminLogout() {
    try {
        await firebase.auth().signOut();
        console.log('Logout realizado com sucesso');
        return { success: true };
    } catch (error) {
        console.error('Erro no logout:', error);
        return { success: false, error: error.message };
    }
}

// Fun√ß√£o modificada para cancelar agendamento (apenas administradores)
async function cancelAppointmentAsAdmin(appointmentId, date) {
    try {
        console.log('=== CANCELANDO AGENDAMENTO COMO ADMIN ===');
        console.log('ID do agendamento:', appointmentId);
        console.log('Data:', date);
        
        // Verificar se o usu√°rio est√° autenticado como administrador
        console.log('Verificando autentica√ß√£o...');
        const isAdmin = await isAdminAuthenticated();
        console.log('Resultado da verifica√ß√£o:', isAdmin);
        
        if (!isAdmin) {
            console.log('‚ùå Acesso negado - n√£o √© administrador');
            throw new Error('Acesso negado. Apenas administradores podem excluir agendamentos.');
        }
        
        console.log('‚úÖ Usu√°rio autenticado como administrador');
        
        // Verificar se o agendamento existe antes de tentar excluir
        console.log('Verificando se o agendamento existe...');
        const appointmentDoc = await appointmentsCollection.doc(appointmentId).get();
        
        if (!appointmentDoc.exists) {
            console.log('‚ùå Agendamento n√£o encontrado');
            throw new Error('Agendamento n√£o encontrado.');
        }
        
        console.log('‚úÖ Agendamento encontrado, procedendo com exclus√£o...');
        
        // Se chegou at√© aqui, √© um administrador autenticado
        await appointmentsCollection.doc(appointmentId).delete();
        console.log('‚úÖ Agendamento exclu√≠do com sucesso');
        
        return { success: true };
    } catch (error) {
        console.error('‚ùå Erro ao cancelar agendamento:', error);
        throw error;
    }
}

// Expor fun√ß√µes para uso global
window.FirebaseAuth = {
    adminLogin,
    adminLogout,
    isAdminAuthenticated,
    cancelAppointmentAsAdmin
};

// Adicionar fun√ß√£o de teste ao FirebaseAppointment
window.FirebaseAppointment.testLoadAppointments = testLoadAppointments;
window.FirebaseAppointment.testAdminLogin = testAdminLogin;

// Fun√ß√£o de diagn√≥stico para verificar status do sistema
async function diagnoseSystem() {
    try {
        console.log('=== DIAGN√ìSTICO DO SISTEMA ===');
        
        // Verificar Firebase
        console.log('1. Verificando Firebase...');
        if (typeof firebase === 'undefined') {
            console.log('‚ùå Firebase n√£o est√° carregado');
            return false;
        }
        console.log('‚úÖ Firebase est√° carregado');
        
        // Verificar autentica√ß√£o
        console.log('2. Verificando autentica√ß√£o...');
        const user = firebase.auth().currentUser;
        if (user) {
            console.log('‚úÖ Usu√°rio autenticado:', user.email);
            const isAdmin = await isAdminAuthenticated();
            console.log('√â administrador:', isAdmin);
        } else {
            console.log('‚ö†Ô∏è Nenhum usu√°rio autenticado');
        }
        
        // Verificar Firestore
        console.log('3. Verificando Firestore...');
        const testSnapshot = await appointmentsCollection.limit(1).get();
        console.log('‚úÖ Firestore funcionando, agendamentos encontrados:', testSnapshot.size);
        
        // Verificar EmailJS
        console.log('4. Verificando EmailJS...');
        if (typeof emailjs === 'undefined') {
            console.log('‚ùå EmailJS n√£o est√° carregado');
        } else {
            console.log('‚úÖ EmailJS est√° carregado');
        }
        
        console.log('=== DIAGN√ìSTICO CONCLU√çDO ===');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
        return false;
    }
}

// Adicionar fun√ß√£o de diagn√≥stico
window.FirebaseAppointment.diagnoseSystem = diagnoseSystem;

// Fun√ß√£o de teste espec√≠fica para autentica√ß√£o
async function testAuthentication() {
    try {
        console.log('=== TESTE DE AUTENTICA√á√ÉO ===');
        
        // Verificar Firebase
        if (typeof firebase === 'undefined') {
            console.log('‚ùå Firebase n√£o est√° carregado');
            return false;
        }
        console.log('‚úÖ Firebase est√° carregado');
        
        // Verificar Auth
        if (!firebase.auth) {
            console.log('‚ùå Firebase Auth n√£o est√° dispon√≠vel');
            return false;
        }
        console.log('‚úÖ Firebase Auth est√° dispon√≠vel');
        
        // Verificar usu√°rio atual
        const user = firebase.auth().currentUser;
        console.log('Usu√°rio atual:', user ? user.email : 'Nenhum usu√°rio');
        
        // Testar isAdminAuthenticated
        console.log('Testando isAdminAuthenticated...');
        const isAdmin = await isAdminAuthenticated();
        console.log('Resultado isAdminAuthenticated:', isAdmin);
        
        // Testar FirebaseAuth.isAdminAuthenticated
        console.log('Testando FirebaseAuth.isAdminAuthenticated...');
        const isAdminGlobal = await window.FirebaseAuth.isAdminAuthenticated();
        console.log('Resultado FirebaseAuth.isAdminAuthenticated:', isAdminGlobal);
        
        return isAdmin;
        
    } catch (error) {
        console.error('‚ùå Erro no teste de autentica√ß√£o:', error);
        return false;
    }
}

// Adicionar fun√ß√£o de teste de autentica√ß√£o
window.FirebaseAppointment.testAuthentication = testAuthentication;

// Fun√ß√£o de teste espec√≠fica para verificar login com credenciais espec√≠ficas
async function testSpecificLogin() {
    try {
        console.log('=== TESTE DE LOGIN COM CREDENCIAIS ESPEC√çFICAS ===');
        
        const email = 'krika.justino@gmail.com';
        const password = 'Cris2025@1';
        
        console.log('üìß E-mail:', email);
        console.log('üîë Senha:', password ? '***' : 'n√£o fornecida');
        
        // Verificar se o e-mail est√° na lista de admins
        const adminEmails = [
            'krika.justino@gmail.com',
            'cristiane@cristianejustino.com',
            'admin@cristianejustino.com'
        ];
        
        console.log('üìã Lista de e-mails de admin:', adminEmails);
        console.log('‚úÖ E-mail est√° na lista de admins:', adminEmails.includes(email));
        
        // Tentar fazer login
        console.log('üöÄ Tentando fazer login...');
        const result = await adminLogin(email, password);
        
        if (result.success) {
            console.log('‚úÖ Login bem-sucedido!');
            console.log('üë§ Usu√°rio:', result.user.email);
            
            // Verificar se √© reconhecido como admin
            const isAdmin = await isAdminAuthenticated();
            console.log('üîê √â reconhecido como admin:', isAdmin);
            
            if (isAdmin) {
                console.log('üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!');
                return { success: true, message: 'Login e verifica√ß√£o de admin funcionando!' };
            } else {
                console.log('‚ö†Ô∏è Login funcionou mas n√£o √© reconhecido como admin');
                return { success: false, message: 'Login funcionou mas verifica√ß√£o de admin falhou' };
            }
        } else {
            console.log('‚ùå Falha no login:', result.error);
            return { success: false, message: result.error };
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return { success: false, message: error.message };
    }
}

// Adicionar fun√ß√£o de teste espec√≠fica
window.FirebaseAppointment.testSpecificLogin = testSpecificLogin;

// Fun√ß√£o de debug espec√≠fica para investigar o problema de acesso negado
async function debugAccessDenied() {
    try {
        console.log('=== DEBUG: INVESTIGANDO ACESSO NEGADO ===');
        
        const email = 'krika.justino@gmail.com';
        const password = 'Cris2025@1';
        
        console.log('1. Verificando Firebase...');
        if (typeof firebase === 'undefined') {
            console.log('‚ùå Firebase n√£o est√° carregado');
            return;
        }
        console.log('‚úÖ Firebase est√° carregado');
        
        console.log('2. Verificando Auth...');
        if (!firebase.auth) {
            console.log('‚ùå Firebase Auth n√£o est√° dispon√≠vel');
            return;
        }
        console.log('‚úÖ Firebase Auth est√° dispon√≠vel');
        
        console.log('3. Verificando usu√°rio atual...');
        const currentUser = firebase.auth().currentUser;
        console.log('Usu√°rio atual:', currentUser ? currentUser.email : 'Nenhum usu√°rio');
        
        console.log('4. Tentando fazer login...');
        const loginResult = await firebase.auth().signInWithEmailAndPassword(email, password);
        console.log('‚úÖ Login do Firebase realizado:', loginResult.user.email);
        
        console.log('5. Aguardando processamento...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('6. Verificando usu√°rio ap√≥s login...');
        const userAfterLogin = firebase.auth().currentUser;
        console.log('Usu√°rio ap√≥s login:', userAfterLogin ? userAfterLogin.email : 'Nenhum usu√°rio');
        
        console.log('7. Testando isAdminAuthenticated...');
        const isAdmin = await isAdminAuthenticated();
        console.log('Resultado isAdminAuthenticated:', isAdmin);
        
        console.log('8. Verificando lista de admins...');
        const adminEmails = [
            'krika.justino@gmail.com',
            'cristiane@cristianejustino.com',
            'admin@cristianejustino.com'
        ];
        
        const normalizedUserEmail = userAfterLogin.email.toLowerCase().trim();
        const normalizedAdminEmails = adminEmails.map(email => email.toLowerCase().trim());
        
        console.log('E-mail do usu√°rio:', userAfterLogin.email);
        console.log('E-mail normalizado:', normalizedUserEmail);
        console.log('Lista de admins:', adminEmails);
        console.log('Lista normalizada:', normalizedAdminEmails);
        console.log('Est√° na lista?', normalizedAdminEmails.includes(normalizedUserEmail));
        
        console.log('9. Compara√ß√£o caractere por caractere...');
        for (let i = 0; i < Math.max(normalizedUserEmail.length, normalizedAdminEmails[0].length); i++) {
            const userChar = normalizedUserEmail[i] || '';
            const adminChar = normalizedAdminEmails[0][i] || '';
            console.log(`Posi√ß√£o ${i}: Usu√°rio='${userChar}' (${userChar.charCodeAt(0)}) Admin='${adminChar}' (${adminChar.charCodeAt(0)})`);
        }
        
        console.log('=== DEBUG CONCLU√çDO ===');
        
    } catch (error) {
        console.error('‚ùå Erro no debug:', error);
    }
}

// Adicionar fun√ß√£o de debug
window.FirebaseAppointment.debugAccessDenied = debugAccessDenied;

// Fun√ß√£o para verificar se j√° est√° logado como admin
async function checkIfAlreadyLoggedInAsAdmin() {
    try {
        console.log('=== VERIFICANDO SE J√Å EST√Å LOGADO COMO ADMIN ===');
        
        const user = firebase.auth().currentUser;
        if (!user) {
            console.log('‚ùå Nenhum usu√°rio logado');
            return { isLoggedIn: false, isAdmin: false };
        }
        
        console.log('‚úÖ Usu√°rio logado:', user.email);
        
        // Aguardar um pouco para garantir que a autentica√ß√£o est√° processada
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const isAdmin = await isAdminAuthenticated();
        console.log('√â admin:', isAdmin);
        
        return { isLoggedIn: true, isAdmin: isAdmin, email: user.email };
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar login:', error);
        return { isLoggedIn: false, isAdmin: false, error: error.message };
    }
}

// Fun√ß√£o para fazer login sem verifica√ß√£o imediata de admin
async function simpleLogin(email, password) {
    try {
        console.log('=== LOGIN SIMPLES ===');
        console.log('E-mail:', email);
        
        const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        console.log('‚úÖ Login realizado:', user.email);
        return { success: true, user: user };
        
    } catch (error) {
        console.error('‚ùå Erro no login:', error);
        return { success: false, error: error.message };
    }
}

// Adicionar fun√ß√µes ao escopo global
window.FirebaseAppointment.checkIfAlreadyLoggedInAsAdmin = checkIfAlreadyLoggedInAsAdmin;
window.FirebaseAppointment.simpleLogin = simpleLogin; 